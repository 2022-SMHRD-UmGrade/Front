// Generated by view binder compiler. Do not edit!
package com.example.umgrade.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.umgrade.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NoticeListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Guideline guideline7;

  @NonNull
  public final Guideline guideline8;

  @NonNull
  public final TextView noticeSeq;

  @NonNull
  public final TextView noticeTime;

  @NonNull
  public final TextView noticeTitle;

  private NoticeListBinding(@NonNull ConstraintLayout rootView, @NonNull Guideline guideline7,
      @NonNull Guideline guideline8, @NonNull TextView noticeSeq, @NonNull TextView noticeTime,
      @NonNull TextView noticeTitle) {
    this.rootView = rootView;
    this.guideline7 = guideline7;
    this.guideline8 = guideline8;
    this.noticeSeq = noticeSeq;
    this.noticeTime = noticeTime;
    this.noticeTitle = noticeTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NoticeListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NoticeListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.notice_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NoticeListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.guideline7;
      Guideline guideline7 = ViewBindings.findChildViewById(rootView, id);
      if (guideline7 == null) {
        break missingId;
      }

      id = R.id.guideline8;
      Guideline guideline8 = ViewBindings.findChildViewById(rootView, id);
      if (guideline8 == null) {
        break missingId;
      }

      id = R.id.noticeSeq;
      TextView noticeSeq = ViewBindings.findChildViewById(rootView, id);
      if (noticeSeq == null) {
        break missingId;
      }

      id = R.id.noticeTime;
      TextView noticeTime = ViewBindings.findChildViewById(rootView, id);
      if (noticeTime == null) {
        break missingId;
      }

      id = R.id.noticeTitle;
      TextView noticeTitle = ViewBindings.findChildViewById(rootView, id);
      if (noticeTitle == null) {
        break missingId;
      }

      return new NoticeListBinding((ConstraintLayout) rootView, guideline7, guideline8, noticeSeq,
          noticeTime, noticeTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
